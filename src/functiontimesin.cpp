// --------------------------------------------------------------------------------
// FunctionTimeSin
//
// Derived from AbstractFunction
//
// Returns sin(2*pi*frequency*t+2*pi*phase_offset) scaled from 0 to 1
//
// --------------------------------------------------------------------------------
//    Aidan Orchard
// --------------------------------------------------------------------------------

// class header file

#include "functiontimesin.h"

#include <QTime>

// --------------------------------------------------------------------------------
//   ####   ####  #    #  ####  ##### #####  #    #  ####  #####  ####  #####   ####
//  #    # #    # ##   # #        #   #    # #    # #    #   #   #    # #    # #
//  #      #    # # #  #  ####    #   #    # #    # #        #   #    # #    #  ####
//  #      #    # #  # #      #   #   #####  #    # #        #   #    # #####       #
//  #    # #    # #   ## #    #   #   #   #  #    # #    #   #   #    # #   #  #    #
//   ####   ####  #    #  ####    #   #    #  ####   ####    #    ####  #    #  ####
// --------------------------------------------------------------------------------

// Default Constructor

FunctionTimeSin::FunctionTimeSin(double f_, double phase_offset_, QObject *parent) : AbstractFunction(parent),
frequency(f_),
phase_offset(phase_offset_)
{
   // start timer
   time = new QTime();
   time->start();
}

// ----------------------------------------------------------
//  ####  ###### ##### ##### ###### #####   ####
// #    # #        #     #   #      #    # #
// #      #####    #     #   #####  #    #  ####
// #  ### #        #     #   #      #####       #
// #    # #        #     #   #      #   #  #    #
//  ####  ######   #     #   ###### #    #  ####
// ----------------------------------------------------------

// f()
double FunctionTimeSin::f() const
{
   return (qSin(time->elapsed()*0.0062831853*frequency+6.283185307*phase_offset)+1)/2;
}

